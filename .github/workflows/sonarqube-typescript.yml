name: SonarQube Analysis (TypeScript)

on:
  workflow_call:
    inputs:
      enable_tests:
        required: false
        type: boolean
        default: true
    secrets:
      SONAR_HOST_URL:
        required: true
      SONAR_TOKEN:
        required: true

jobs:
  sonarqube:
    name: Analyze TypeScript with SonarQube
    runs-on: ubuntu-latest
    env:
      TZ: Australia/Brisbane
      CI: true
      ENABLE_LINT: true

    steps:
      # üì• Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # üîç Detect Node.js version from package.json
      - name: Get Node.js version from package.json
        id: node_version
        run: |
          NODE_VERSION=$(jq -r '.volta.node' package.json)
          if [ -z "$NODE_VERSION" ]; then
            echo "Error: No Node.js version found in package.json under .volta.node"
            exit 1
          fi
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV

      # üîß Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true

      # üõ† Cache dependencies
      - name: Yarn cache
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      # üì¶ Install dependencies
      - name: Install Dependencies
        run: yarn install --immutable --check-cache

      # ‚öôÔ∏è Install Terraform (if needed)
      - name: Install Terraform
        if: env.ENABLE_LINT == 'false'
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update && sudo apt-get install -y terraform

      # üõ† Verify Terraform Installation
      - name: Verify Terraform Installation
        run: terraform version

      # üîß Generate Relay Files (if applicable)
      - name: Generate Relay Files
        run: yarn relay || echo "Skipping Relay"

      # üîé TypeScript Check
      - name: TypeScript Check
        run: yarn tsc --noEmit --skipLibCheck

      # üîç Lint Code (Parallel Execution)
      - name: Lint Code
        if: env.ENABLE_LINT == 'true'
        run: ESLINT_PARALLEL=TRUE yarn lint

      # üèó Build Tests (Only if enabled)
      - name: Build Tests
        if: inputs.enable_tests == true
        run: |
          TEST_PROJECTS=$(find ./ -name '*.test.ts' -or -name '*.test.tsx')
          if [ -z "$TEST_PROJECTS" ]; then
            echo "‚ö†Ô∏è No test files found! Skipping test build."
            exit 0
          fi
          echo "Test files found: $TEST_PROJECTS"
          yarn test --no-cache --ci --coverage

      # üîß Fix lcov paths for SonarQube
      - name: Fix lcov paths
        if: inputs.enable_tests == true
        run: |
          echo "Fixing paths in lcov.info..."
          sed -i 's#\.\./##g' coverage/lcov.info
          echo "Fixed lcov.info paths:"
          head -n 20 coverage/lcov.info || true

      # üìå Install Sonar Scanner
      - name: Install Sonar Scanner
        run: npm install -g sonar-scanner

      # üöÄ Start SonarQube Analysis
      - name: Run SonarQube Analysis
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "Running SonarQube analysis..."

          SONAR_CMD="sonar-scanner -Dsonar.projectKey='${{ github.event.repository.name }}' \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.host.url='${{ secrets.SONAR_HOST_URL }}' \
            -Dsonar.login='${{ secrets.SONAR_TOKEN }}' \
            -Dsonar.exclusions='**/node_modules/**,**/stories/**,**/*.stories.tsx'"

          # Si los tests pasaron, incluir cobertura en Sonar
          if [ -f "coverage/lcov.info" ]; then
            SONAR_CMD="$SONAR_CMD -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info"
          else
            echo "No test results, running Sonar without tests..."
          fi

          # Ejecutar SonarQube
          eval $SONAR_CMD
