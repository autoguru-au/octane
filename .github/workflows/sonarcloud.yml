name: SonarQube CI

on: push

jobs:
  test:
    name: SonarQube for TypeScript
    runs-on: ubuntu-latest
    env:
      TZ: Australia/Brisbane
      CI: true

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        id: setups
        run: |
          echo "YARN_CACHE=$(yarn cache dir)" >> $GITHUB_ENV
          echo "NODE_VERSION=$(jq -r '.volta.node' package.json)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true

      - name: Yarn cache
        uses: actions/cache@v3
        with:
          path: ${{ env.YARN_CACHE }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-node-${{ env.NODE_VERSION }}

      - run: yarn --immutable

      - name: Lint
        run: yarn lint

      - name: Run Tests & Generate Coverage
        run: yarn test --no-cache --ci --coverage

      - name: Validate Coverage Report
        id: check_coverage
        run: |
          if [ -f coverage/lcov.info ]; then
            echo "COVERAGE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "COVERAGE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Install Sonar Scanner
        if: env.COVERAGE_EXISTS == 'true'
        run: npm install -g sonar-scanner

      - name: Run SonarQube Analysis
        if: env.COVERAGE_EXISTS == 'true'
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey="${{ github.event.repository.name }}" \
            -Dsonar.sources=packages \
            -Dsonar.exclusions="**/node_modules/**,**/stories/**,**/*.stories.tsx" \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.host.url="${{ secrets.SONAR_HOST_URL }}" \
            -Dsonar.login="${{ secrets.SONAR_TOKEN }}"
