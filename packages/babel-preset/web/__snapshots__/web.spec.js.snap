// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`web preset should allow for cjs modules 1`] = `
"\\"use strict\\";

var _interopRequireDefault = require(\\"@babel/runtime/helpers/interopRequireDefault\\");

require(\\"core-js/modules/es.array.iterator\\");

require(\\"core-js/modules/es.map\\");

require(\\"core-js/modules/es.object.to-string\\");

require(\\"core-js/modules/web.dom-collections.iterator\\");

var _createClass2 = _interopRequireDefault(require(\\"@babel/runtime/helpers/createClass\\"));

var myVar = new Map([]);

var TestClass =
/*#__PURE__*/
function () {
  function TestClass() {
    this.prop = 'prop';
  }

  (0, _createClass2.default)(TestClass, [{
    key: \\"getterProp\\",
    get: function get() {
      return 'getter prop';
    }
  }]);
  return TestClass;
}();

TestClass.staticProp = 'static prop';
var objectA = {
  a: 'a',
  b: 'b'
};
var d = 'd';
var objectB = Object.assign({}, objectA, {
  c: 'c',
  [d]: 'd'
});"
`;

exports[`web preset should allow for corejs override 1`] = `
"\\"use strict\\";

import _Object$assign from \\"@babel/runtime-corejs2/core-js/object/assign\\";
import _createClass from \\"@babel/runtime-corejs2/helpers/createClass\\";
import _Map from \\"@babel/runtime-corejs2/core-js/map\\";
var myVar = new _Map([]);

var TestClass =
/*#__PURE__*/
function () {
  function TestClass() {
    this.prop = 'prop';
  }

  _createClass(TestClass, [{
    key: \\"getterProp\\",
    get: function get() {
      return 'getter prop';
    }
  }]);

  return TestClass;
}();

TestClass.staticProp = 'static prop';
var objectA = {
  a: 'a',
  b: 'b'
};
var d = 'd';

var objectB = _Object$assign({}, objectA, {
  c: 'c',
  [d]: 'd'
});"
`;

exports[`web preset should match the snapshot 1`] = `
"\\"use strict\\";

import \\"core-js/modules/es.array.iterator\\";
import \\"core-js/modules/es.map\\";
import \\"core-js/modules/es.object.to-string\\";
import \\"core-js/modules/web.dom-collections.iterator\\";
import _createClass from \\"@babel/runtime/helpers/createClass\\";
var myVar = new Map([]);

var TestClass =
/*#__PURE__*/
function () {
  function TestClass() {
    this.prop = 'prop';
  }

  _createClass(TestClass, [{
    key: \\"getterProp\\",
    get: function get() {
      return 'getter prop';
    }
  }]);

  return TestClass;
}();

TestClass.staticProp = 'static prop';
var objectA = {
  a: 'a',
  b: 'b'
};
var d = 'd';
var objectB = Object.assign({}, objectA, {
  c: 'c',
  [d]: 'd'
});"
`;
