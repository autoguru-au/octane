// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`web preset should allow for cjs modules 1`] = `
"\\"use strict\\";

var _interopRequireDefault = require(\\"@babel/runtime/helpers/interopRequireDefault\\");

require(\\"core-js/modules/es.array.iterator.js\\");

require(\\"core-js/modules/es.promise.js\\");

require(\\"core-js/modules/web.dom-collections.iterator.js\\");

var _defineProperty2 = _interopRequireDefault(require(\\"@babel/runtime/helpers/defineProperty\\"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const myVar = new Map([]);

class TestClass {
  constructor() {
    (0, _defineProperty2.default)(this, \\"prop\\", 'prop');
  }

  get getterProp() {
    return 'getter prop';
  }

}

(0, _defineProperty2.default)(TestClass, \\"staticProp\\", 'static prop');
const objectA = {
  a: 'a',
  b: 'b'
};
const d = 'd';

const objectB = _objectSpread(_objectSpread({}, objectA), {}, {
  c: 'c',
  [d]: 'd'
});

function test(firstArg) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  const [, test2] = args;
  console.log(firstArg, args[0], test2);
}

const testAsync = async () => {
  await 'test';
};"
`;

exports[`web preset should allow for corejs override 1`] = `
"\\"use strict\\";

import _Object$defineProperty from \\"@babel/runtime-corejs2/core-js/object/define-property\\";
import _Object$defineProperties from \\"@babel/runtime-corejs2/core-js/object/define-properties\\";
import _Object$getOwnPropertyDescriptors from \\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\\";
import _Object$getOwnPropertyDescriptor from \\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\\";
import _Object$getOwnPropertySymbols from \\"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\\";
import _Object$keys from \\"@babel/runtime-corejs2/core-js/object/keys\\";
import _defineProperty from \\"@babel/runtime-corejs2/helpers/defineProperty\\";
import _Map from \\"@babel/runtime-corejs2/core-js/map\\";

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

const myVar = new _Map([]);

class TestClass {
  constructor() {
    _defineProperty(this, \\"prop\\", 'prop');
  }

  get getterProp() {
    return 'getter prop';
  }

}

_defineProperty(TestClass, \\"staticProp\\", 'static prop');

const objectA = {
  a: 'a',
  b: 'b'
};
const d = 'd';

const objectB = _objectSpread(_objectSpread({}, objectA), {}, {
  c: 'c',
  [d]: 'd'
});

function test(firstArg) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  const [, test2] = args;
  console.log(firstArg, args[0], test2);
}

const testAsync = async () => {
  await 'test';
};"
`;

exports[`web preset should do the __DEV__ dev expression 1`] = `
"\\"use strict\\";

if (process.env.NODE_ENV !== \\"production\\") {
  console.log('test');
}"
`;

exports[`web preset should do the invariant dev expression 1`] = `
"\\"use strict\\";

!(test === true) ? process.env.NODE_ENV !== \\"production\\" ? invariant(false, \\"some error\\") : invariant(false) : void 0;"
`;

exports[`web preset should do the warning dev expression 1`] = `
"\\"use strict\\";

process.env.NODE_ENV !== \\"production\\" ? warning(test === true, \\"some error\\") : void 0;"
`;

exports[`web preset should match the snapshot 1`] = `
"\\"use strict\\";

import \\"core-js/modules/es.array.iterator.js\\";
import \\"core-js/modules/es.promise.js\\";
import \\"core-js/modules/web.dom-collections.iterator.js\\";
import _defineProperty from \\"@babel/runtime/helpers/defineProperty\\";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const myVar = new Map([]);

class TestClass {
  constructor() {
    _defineProperty(this, \\"prop\\", 'prop');
  }

  get getterProp() {
    return 'getter prop';
  }

}

_defineProperty(TestClass, \\"staticProp\\", 'static prop');

const objectA = {
  a: 'a',
  b: 'b'
};
const d = 'd';

const objectB = _objectSpread(_objectSpread({}, objectA), {}, {
  c: 'c',
  [d]: 'd'
});

function test(firstArg) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  const [, test2] = args;
  console.log(firstArg, args[0], test2);
}

const testAsync = async () => {
  await 'test';
};"
`;

exports[`web preset should optimize clsx 1`] = `
"\\"use strict\\";

import clsx from 'clsx';
const validCondition = true;
const invalidCondition = false;
const a = 'a-class';
const b = 'b-class';
const d = 'd-class';
clsx('a');
clsx(a);
clsx(['a', b]);
clsx(a, 'b', ['c', d]);
clsx(a, 'b', ['c', d], 'e');
clsx(a, {
  ['b']: true,
  ['c']: false,
  ['e']: someCondition,
  f: true,
  g: false,
  h: someCondition,
  i: validCondition,
  j: invalidCondition
});
clsx(validCondition && 'a');
clsx({
  btn: true,
  'btn-foo': isDisabled,
  'btn-bar': !isDisabled
});"
`;
