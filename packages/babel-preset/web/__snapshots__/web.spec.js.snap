// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`web preset should allow for cjs modules 1`] = `
"const myVar = new Map([]);
class TestClass {
  static staticProp = 'static prop';
  prop = 'prop';
  get getterProp() {
    return 'getter prop';
  }
}
const objectA = {
  a: 'a',
  b: 'b'
};
const d = 'd';
const objectB = {
  ...objectA,
  c: 'c',
  [d]: 'd'
};
function test(firstArg, ...args) {
  const [, test2] = args;
  console.log(firstArg, args[0], test2);
}
const testAsync = async () => {
  await 'test';
};"
`;

exports[`web preset should allow for corejs override 1`] = `
"const myVar = new Map([]);
class TestClass {
  static staticProp = 'static prop';
  prop = 'prop';
  get getterProp() {
    return 'getter prop';
  }
}
const objectA = {
  a: 'a',
  b: 'b'
};
const d = 'd';
const objectB = {
  ...objectA,
  c: 'c',
  [d]: 'd'
};
function test(firstArg, ...args) {
  const [, test2] = args;
  console.log(firstArg, args[0], test2);
}
const testAsync = async () => {
  await 'test';
};"
`;

exports[`web preset should do the __DEV__ dev expression 1`] = `
"if (__DEV__) {
  console.log('test');
}"
`;

exports[`web preset should do the invariant dev expression 1`] = `"invariant(test === true, \\"some error\\");"`;

exports[`web preset should do the warning dev expression 1`] = `"warning(test === true, \\"some error\\");"`;

exports[`web preset should match the snapshot 1`] = `
"\\"use strict\\";

import _createClass from \\"@babel/runtime/helpers/createClass\\";
import _defineProperty from \\"@babel/runtime/helpers/defineProperty\\";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
const myVar = new Map([]);
let TestClass = /*#__PURE__*/function () {
  function TestClass() {
    _defineProperty(this, \\"prop\\", 'prop');
  }
  return _createClass(TestClass, [{
    key: \\"getterProp\\",
    get: function () {
      return 'getter prop';
    }
  }]);
}();
_defineProperty(TestClass, \\"staticProp\\", 'static prop');
const objectA = {
  a: 'a',
  b: 'b'
};
const d = 'd';
const objectB = _objectSpread(_objectSpread({}, objectA), {}, {
  c: 'c',
  [d]: 'd'
});
function test(firstArg) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  const [, test2] = args;
  console.log(firstArg, args[0], test2);
}
const testAsync = async () => {
  await 'test';
};"
`;

exports[`web preset should optimize clsx 1`] = `
"import clsx from 'clsx';
const validCondition = true;
const invalidCondition = false;
const a = 'a-class';
const b = 'b-class';
const d = 'd-class';
clsx('a');
clsx(a);
clsx(['a', b]);
clsx(a, 'b', ['c', d]);
clsx(a, 'b', ['c', d], 'e');
clsx(a, {
  ['b']: true,
  ['c']: false,
  ['e']: someCondition,
  f: true,
  g: false,
  h: someCondition,
  i: validCondition,
  j: invalidCondition
});
clsx(validCondition && 'a');
clsx({
  btn: true,
  'btn-foo': isDisabled,
  'btn-bar': !isDisabled
});"
`;
