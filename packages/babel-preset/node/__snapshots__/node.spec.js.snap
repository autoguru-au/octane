// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`node preset should allow for corejs override 1`] = `
"\\"use strict\\";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const myVar = new Map([]);

let TestClass = /*#__PURE__*/function () {
  function TestClass() {
    _defineProperty(this, \\"prop\\", 'prop');
  }

  _createClass(TestClass, [{
    key: \\"getterProp\\",
    get: function () {
      return 'getter prop';
    }
  }]);

  return TestClass;
}();

_defineProperty(TestClass, \\"staticProp\\", 'static prop');

const objectA = {
  a: 'a',
  b: 'b'
};
const d = 'd';

const objectB = _objectSpread(_objectSpread({}, objectA), {}, {
  c: 'c',
  [d]: 'd'
});

console.log(objectB === null || objectB === void 0 ? void 0 : objectB.d);

function nullCoal(test) {
  const thing = this;
  return test !== null && test !== void 0 ? test : \\"thing\\";
}"
`;

exports[`node preset should match the snapshot 1`] = `
"\\"use strict\\";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const myVar = new Map([]);

let TestClass = /*#__PURE__*/function () {
  function TestClass() {
    _defineProperty(this, \\"prop\\", 'prop');
  }

  _createClass(TestClass, [{
    key: \\"getterProp\\",
    get: function () {
      return 'getter prop';
    }
  }]);

  return TestClass;
}();

_defineProperty(TestClass, \\"staticProp\\", 'static prop');

const objectA = {
  a: 'a',
  b: 'b'
};
const d = 'd';

const objectB = _objectSpread(_objectSpread({}, objectA), {}, {
  c: 'c',
  [d]: 'd'
});

console.log(objectB === null || objectB === void 0 ? void 0 : objectB.d);

function nullCoal(test) {
  const thing = this;
  return test !== null && test !== void 0 ? test : \\"thing\\";
}"
`;
