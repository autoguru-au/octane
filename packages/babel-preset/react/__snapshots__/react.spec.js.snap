// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`react preset when production should match the snapshot for fixture asFunction.jsx 1`] = `
"var REACT_ELEMENT_TYPE;

function _jsx(type, props, key, children) { if (!REACT_ELEMENT_TYPE) { REACT_ELEMENT_TYPE = typeof Symbol === \\"function\\" && Symbol[\\"for\\"] && Symbol[\\"for\\"](\\"react.element\\") || 0xeac7; } var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = { children: void 0 }; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = new Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }

import React, { memo } from 'react';

var _ref = /*#__PURE__*/_jsx(\\"h1\\", {}, void 0, \\"test\\");

export const Test = /*#__PURE__*/memo(function () {
  return _ref;
});

var _ref2 = /*#__PURE__*/_jsx(\\"h1\\", {}, void 0, \\"test\\");

export const Test2 = /*#__PURE__*/memo(function Named() {
  return _ref2;
});"
`;

exports[`react preset when production should match the snapshot for fixture conditionalMemo.jsx 1`] = `
"var REACT_ELEMENT_TYPE;

function _jsx(type, props, key, children) { if (!REACT_ELEMENT_TYPE) { REACT_ELEMENT_TYPE = typeof Symbol === \\"function\\" && Symbol[\\"for\\"] && Symbol[\\"for\\"](\\"react.element\\") || 0xeac7; } var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = { children: void 0 }; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = new Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }

import React, { memo } from 'react';

var _ref = /*#__PURE__*/_jsx(\\"h1\\", {}, void 0, \\"test a\\");

var _ref2 = /*#__PURE__*/_jsx(\\"h1\\", {}, void 0, \\"test b\\");

export const Test = something ? /*#__PURE__*/memo(() => _ref) : /*#__PURE__*/memo(() => _ref2);"
`;

exports[`react preset when production should match the snapshot for fixture deepMemo.jsx 1`] = `
"var REACT_ELEMENT_TYPE;

function _jsx(type, props, key, children) { if (!REACT_ELEMENT_TYPE) { REACT_ELEMENT_TYPE = typeof Symbol === \\"function\\" && Symbol[\\"for\\"] && Symbol[\\"for\\"](\\"react.element\\") || 0xeac7; } var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = { children: void 0 }; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = new Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }

import React, { memo } from 'react';

const test = () => {
  return factory(someProp => {
    var _ref = /*#__PURE__*/_jsx(\\"h1\\", {}, void 0, someProp);

    return /*#__PURE__*/memo(() => _ref);
  });
};

const test2 = () => {
  return factory(someProp => {
    var _ref2 = /*#__PURE__*/_jsx(\\"h1\\", {}, void 0, someProp);

    const WrappedFn = () => _ref2;

    WrappedFn.displayName = 'boom bang, click clak';
    return /*#__PURE__*/memo(WrappedFn);
  });
};"
`;

exports[`react preset when production should match the snapshot for fixture defaultExportMemo.jsx 1`] = `
"var REACT_ELEMENT_TYPE;

function _jsx(type, props, key, children) { if (!REACT_ELEMENT_TYPE) { REACT_ELEMENT_TYPE = typeof Symbol === \\"function\\" && Symbol[\\"for\\"] && Symbol[\\"for\\"](\\"react.element\\") || 0xeac7; } var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = { children: void 0 }; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = new Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }

import React, { memo } from 'react';

var _ref = /*#__PURE__*/_jsx(\\"h1\\", {}, void 0, \\"test\\");

export default /*#__PURE__*/memo(() => _ref);"
`;

exports[`react preset when production should match the snapshot for fixture memoPassedIn.jsx 1`] = `
"var REACT_ELEMENT_TYPE;

function _jsx(type, props, key, children) { if (!REACT_ELEMENT_TYPE) { REACT_ELEMENT_TYPE = typeof Symbol === \\"function\\" && Symbol[\\"for\\"] && Symbol[\\"for\\"](\\"react.element\\") || 0xeac7; } var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = { children: void 0 }; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = new Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }

import React, { memo } from 'react';

var _ref = /*#__PURE__*/_jsx(\\"h1\\", {}, void 0, \\"test\\");

export const Test = withData( /*#__PURE__*/memo(() => _ref));"
`;

exports[`react preset when production should match the snapshot for fixture memoWithDestructure.jsx 1`] = `
"var REACT_ELEMENT_TYPE;

function _jsx(type, props, key, children) { if (!REACT_ELEMENT_TYPE) { REACT_ELEMENT_TYPE = typeof Symbol === \\"function\\" && Symbol[\\"for\\"] && Symbol[\\"for\\"](\\"react.element\\") || 0xeac7; } var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = { children: void 0 }; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = new Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }

import { memo } from 'react';

var _ref = /*#__PURE__*/_jsx(\\"h1\\", {}, void 0, \\"test\\");

const TestMemo = /*#__PURE__*/memo(() => _ref);"
`;

exports[`react preset when production should match the snapshot for fixture standardReact.jsx 1`] = `
"var REACT_ELEMENT_TYPE;

function _jsx(type, props, key, children) { if (!REACT_ELEMENT_TYPE) { REACT_ELEMENT_TYPE = typeof Symbol === \\"function\\" && Symbol[\\"for\\"] && Symbol[\\"for\\"](\\"react.element\\") || 0xeac7; } var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = { children: void 0 }; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = new Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }

import React, { memo } from 'react';

class GreetSomeone extends React.Component {
  render() {
    return /*#__PURE__*/_jsx(\\"div\\", {}, void 0, this.props.greeting, \\" \\", this.props.subject, \\"!\\");
  }

}

var _ref = /*#__PURE__*/_jsx(\\"label\\", {
  htmlFor: \\"greeting\\"
}, void 0, \\"Greeting: \\");

function App() {
  const [greeting, setGreeting] = React.useState('HELLO');

  function handleGreetingChange(event) {
    const input = event.target;
    const newGreeting = input.value.toUpperCase();
    setGreeting(newGreeting);
  }

  return /*#__PURE__*/_jsx(\\"form\\", {}, void 0, /*#__PURE__*/_jsx(\\"div\\", {}, void 0, _ref, /*#__PURE__*/_jsx(\\"input\\", {
    id: \\"greeting\\",
    onChange: handleGreetingChange,
    value: greeting
  })), /*#__PURE__*/_jsx(\\"div\\", {}, void 0, /*#__PURE__*/_jsx(GreetSomeone, {
    greeting: greeting,
    subject: \\"Nancy\\"
  })));
}

var _ref2 = /*#__PURE__*/_jsx(\\"h1\\", {}, void 0, \\"test\\");

const MemoTest = /*#__PURE__*/memo(() => _ref2);"
`;

exports[`react preset when production should match the snapshot for fixture usingReactMemo.jsx 1`] = `
"var REACT_ELEMENT_TYPE;

function _jsx(type, props, key, children) { if (!REACT_ELEMENT_TYPE) { REACT_ELEMENT_TYPE = typeof Symbol === \\"function\\" && Symbol[\\"for\\"] && Symbol[\\"for\\"](\\"react.element\\") || 0xeac7; } var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = { children: void 0 }; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = new Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }

import React from 'react';

var _ref = /*#__PURE__*/_jsx(\\"h1\\", {}, void 0, \\"test\\");

export const TestMemo = /*#__PURE__*/React.memo(() => _ref);"
`;
